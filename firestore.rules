rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Funciones auxiliares
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    function isProfesor() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/profesores/$(request.auth.uid));
    }
    
    function isEstudiante() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/estudiantes/$(request.auth.uid));
    }
    
    function isValidDate() {
      return request.resource.data.createdAt is timestamp &&
             request.resource.data.updatedAt is timestamp;
    }

    // Reglas para cada colecci√≥n
    match /estudiantes/{estudianteId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin() && isValidDate();
      allow update: if (isAdmin() || request.auth.uid == estudianteId) && isValidDate();
      allow delete: if isAdmin();
      
      match /notas/{notaId} {
        allow read: if isAuthenticated() && 
          (isAdmin() || request.auth.uid == estudianteId || isProfesor());
        allow write: if (isAdmin() || isProfesor()) && isValidDate();
      }
      
      match /ausencias/{ausenciaId} {
        allow read: if isAuthenticated() && 
          (isAdmin() || request.auth.uid == estudianteId || isProfesor());
        allow create: if (isAuthenticated() && request.auth.uid == estudianteId) || isAdmin();
        allow update: if isAdmin() || isProfesor();
      }
    }
    
    match /profesores/{profesorId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin() && isValidDate();
      allow update: if (isAdmin() || request.auth.uid == profesorId) && isValidDate();
      allow delete: if isAdmin();
      
      match /materias/{materiaId} {
        allow read: if isAuthenticated();
        allow write: if (isAdmin() || request.auth.uid == profesorId) && isValidDate();
      }
    }
    
    match /modulos/{moduloId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() && isValidDate();
    }
    
    match /materias/{materiaId} {
      allow read: if isAuthenticated();
      allow create, update: if (isAdmin() || isProfesor()) && isValidDate();
      allow delete: if isAdmin();
    }
    
    match /notas/{notaId} {
      allow read: if isAuthenticated();
      allow create, update: if (isAdmin() || isProfesor()) && isValidDate();
      allow delete: if isAdmin();
    }
  }
}
